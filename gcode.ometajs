export ometa GCode {
    toEOL     = (~(end | '\n') char)*:s  -> s.join(""),
    comment   = space* fromTo(';','\n'):com -> this.logComment(com.trim),
    flot      = <('-'|'+')? digit+ ('.' digit+)?>:f -> f,
    axiscoord = ("X" | "Y" | "Z" | "F" | "E" | "I" | "J"):l flot:f -> [l,f],

    temp      = "S" flot:val            -> val,
    tool      = "T" digit:val           -> val,
    speed     = "S" digit+:val          -> val.join(""),

    code      = "G0":c (axiscoord)+:ac  -> this.logRapidMove(c,ac),
    code      = "G1":c (axiscoord)+:ac  -> this.logControlledMove(c,ac), //console.log("controlled move",c,ac),
    code      = "G3":c (axiscoord)+:ac  -> console.log("controlled move arc counter clockwise",ac),
    code      = "G20":c                 -> console.log("set units to inches",c),
    code      = "G21":c                 -> console.log("set units to mm",c),
    code      = "G28":c (axiscoord)+:ac -> console.log("move to origin",ac),
    code      = "G90":c -> console.log("set to absolute positioning"),
    code      = "G91":c -> console.log("set to relative positioning"),
    code      = "G92":c (axiscoord)+:ac -> console.log("set new zeropoint",ac),

    code      = "M3":u "S" digit+:speed -> console.log("spindle on clockwise, speed =",speed),
    code      = "M5"                    -> console.log("stop the spindle"),
    code      = "M109" tool:t temp:temp -> console.log("set tool",t,'to temp',temp,'C and wait'),
    code      = "M30"                   -> console.log("end of program"),
    code      = "M82"                   -> console.log("set extruder to absolute mode"),
    code      = "M84"                   -> console.log("steppers off"),
    code      = "M104" speed:speed      -> console.log("exturder heater off"),
    code      = "M140" speed:speed      -> console.log("heated bed off"),
    code      = "M106" speed:speed      -> console.log("fan on",speed),
    code      = "M107"                  -> console.log("fan off"),
    code      = "M117" toEOL:mess       -> this.logDisplayLCDMessage(mess),
    code      = tool:tool               -> console.log("set tool to",tool),

    EOL       = ('\r' '\n' | '\r' | '\n'),
    line      = comment | code comment | code EOL -> this.logLineNumber(),
    start     = line+ anything*:x -> console.log("complete",x)
}

GCode.lineCount = 0;
GCode.zmoves = 0;

GCode.logComment = function(comment) { }
GCode.logLineNumber = function() { GCode.lineCount++; }

GCode.logDisplayLCDMessage = function(message) { }
GCode.logControlledMove = function(c,ac) {
    ac.forEach(function(axis) {
        if(axis[0] == 'Z') {
            GCode.logMoveZ(axis[1]);
        }
    });
}
GCode.logRapidMove = function(c,ac) {
    ac.forEach(function(axis) {
        if(axis[0] == 'Z') {
            GCode.logMoveZ(axis[1]);
        }
    });
}

GCode.logMoveZ = function(val) { this.zmoves++; }

console.log("doing some tests");


/*

notes:

single quotes means that thing exactly
double quotes means token('thing') which includes the whitespace handling.
When you want to match whitespace like the newline, you want that part in single quotes.
ex:  "foo" "bar"+ '\n'   is foo plus at least one bar plus end of line.

for auto-matching give multiple rules the same name. it will match whichever version of the rule
comes first that also matches the token stream.  ex:

bar = "goodbar",
bar = "badbar",
foo = bar+ '\n',

~'x' is negation, but it does not consume. so to do toEOL you need

toEOL     = (~(end | '\n') char)* (end | '\n') -> console.log("set LCD message to "),

notice is says not end or \n, then char. without the char it will spin forever


*/
