export ometa GCode {
    comment   = fromTo('(',')'):com -> console.log("comment",com),
    flot      = <'-'? digit+ ('.' digit+)?>:f -> f,
    axiscoord = ("X" | "Y" | "Z" | "F" | "E" | "I" | "J"):l flot:f -> [l,f],

    code      = "G0":c (axiscoord)+:ac -> console.log("rapid move",c,ac),
    code      = "G1":c (axiscoord)+:ac -> console.log("controlled move",ac),
    code      = "G3":c (axiscoord)+:ac -> console.log("controlled move arc counter clockwise",ac),
    code      = "G17":c -> console.log("unknown",c),
    code      = "G20":c -> console.log("set units to inches",c),
    code      = "G21":c -> console.log("set units to mm",c),
    code      = "G40":u -> console.log("unknown, Cutter (dia.or rad.) compensation off?",u),
    code      = "G54":u -> console.log("unknown, work coord offset?",u),
    code      = "G64":u -> console.log("unknown, Exact stop mode off?",u),
    code      = "G90":c -> console.log("set to absolute positioning",c),
    code      = "G91":c -> console.log("set to relative positioning",c),
    code      = "G92":c (axiscoord)+:ac -> console.log("set new zeropoint",ac),
    code      = "G94":u -> console.log("unknown, feed rate?",u),

    code      = "M3":u "S" digit+:speed -> console.log("spindle on clockwise, speed =",speed),
    code      = "M5" -> console.log("stop the spindle"),
    code      = "M30" -> console.log("end of program"),


    code      = 'T' digit:d "M6":m   -> console.log("select tool",d,"unknown:",m),
    code      = "S0" -> console.log("unknown S0"),

    elem      = code,
    EOL       = '\r' '\n' | '\r' | '\n',
    line      = (comment | elem+) EOL,
    start     = line+ anything*:x -> console.log("complete",x)
}


console.log("doing some tests");
//GCode.matchAll('G17 G20 G90 G94 G54\n','start')
//G17 G20 G90 G94 G54
//GCode.matchAll('G0 Z0.25\nG17\nG21\n','start')
//GCode.matchAll('G17\nG21\n','start')
//GCode.matchAll('G21','start')
//G0 Z0.25

/*
GCode.matchAll('G21\nG91\nG1 X200 F3000\nG1 Y200 F3000\n'
  +'G1 X-82 Y-76 F3000\nG1 Z-200 F500\nG1 Z5 F500\nG1 Z-10 F250\n'
  +'G90\nG92 X0 Y0 Z0 E0\n'
  ,'start');

*/
/*

notes:

single quotes means that thing exactly
double quotes means token('thing') which includes the whitespace handling.
When you want to match whitespace like the newline, you want that part in single quotes.
ex:  "foo" "bar"+ '\n'   is foo plus at least one bar plus end of line.

for auto-matching give multiple rules the same name. it will match whichever version of the rule
comes first that also matches the token stream.  ex:

bar = "goodbar",
bar = "badbar",
foo = bar+ '\n',



*/
